<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 개인메모용 mapper -->

<!-- MyBatis 사용 목적 중 하나는 DAO로부터 SQL문을 분리하는 것이다.
     분리된 SQL문은 SQL mapper 파일에 작성하며 DAO에서는 SqlSession 객체가 SQL mapper 파일을 참조하게 된다. -->

	<mapper namespace="org.hdcd.mapper.BoardMapper">
		
		<!-- 이 구문의 이름은 selectPerson이고 int타입의 파라미터를 가진다. 그리고 결과 데이터는 HashMap 에 저장된다.-->
		<select id="selectPerson" parameterType="int" resultType="hashmap">
 			 SELECT * FROM PERSON WHERE ID = #{id}
		</select>
		<!-- 
			#{id} 이 표기법은 마이바티스에게 PreparedStatement파라미터를 만들도록 지시한다.
		 -->

		<select id="selectPerson" parameterType="int" parameterMap="deprecated" resultType="hashmap" resultMap="personResultMap"
  				flushCache="false" useCache="true" timeout="10000" fetchSize="256" statementType="PREPARED" resultSetType="FORWARD_ONLY">
  				
  		<!--  		
  				id : 구문을 찾기 위해 사용될수 있는 네임스페이스내 유일한 구분자
  				
  				parameterType : 구문에 전달될 파라미터의 패키지 경로를 포함한 전체 클래스명이나 별칭
  				
  				resultType : 이 구문에 의해 리턴되는 기대타입의 패키지 경로를 포함한 전체 클래스명이나 별칭,
  							 SELECT문 실행 결과를 담을 객체,패키지 이름을 포함한 클래스 이름 또는 객체 alias 지정
  						
  				resultMap : 외부 resultMap 참조명,
  							SELECT문 실행 결과를 담을 객체를 resultMap으로 지정 <resultMap>을 따로 선언해줘야 한다.
							resultType과 resultMap 중 하나를 택해서 설정한다
  				
  				flushCache : 이 값을 true로 셋팅하면 구문이 호출될때마다 로컬,2nd 레벨 캐시가 지워질것이다 (flush), 디폴트는 false이다.
  				
  				useCache : 이 값을 true 로 셋팅하면 구문의 결과가 2nd 레벨 캐시에 캐시 될 것이다. 디폴트는 true이다.

				timeout : 예외가 던져지기 전에 데이터베이스의 요청 결과를 기다리는 최대시간을 설정한다. 디폴트는 셋팅하지 않는 것이고 드라이버에 따라 다소 지원되지 않을 수 있다.

				fetchSize : 지정된 수만큼의 결과를 리턴하도록 하는 드라이버 힌트 형태의 값이다. 디폴트는 셋팅하지 않는 것이고 드라이버에 따라 다소 지원되지 않을 수 있다.

				statementType : STATEMENT, PREPARED 또는 CALLABLE 중 하나를 선택할 수 있다. 마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다. 디폴트는 PREPARED이다.

				resultSetType : FORWARD_ONLY|SCROLL_SENSITIVE|SCROLL_INSENSITIVE중 하나를 선택할 수 있다. 디폴트는 셋팅하지 않는 것이고 드라이버에 다라 다소 지원되지 않을 수 있다.

				databaseId : 설정된 databaseIdProvider가 있는 경우 마이바티스는 databaseId 속성이 없는 모든 구문을 로드하거나 일치하는 databaseId와 함께 로드될 것이다. 
							 같은 구문에서 databaseId가 있거나 없는 경우 모두 있다면 뒤에 나온 것이 무시된다.

				resultOrdered : 이 설정은 내포된 결과를 조회하는 구문에서만 적용이 가능하다. true로 설정하면 내포된 결과를 가져오거나 새로운 주요 결과 레코드를 리턴할때 함께 가져오도록 한다. 
								이전의 결과 레코드에 대한 참조는 더 이상 발생하지 않는다. 이 설정은 내포된 결과를 처리할때 조금 더 많은 메모리를 채운다. 
								디폴트값은 false 이다.

				-->		
  	 	</select>

		<insert id="insertAuthor" parameterType="domain.blog.Author" flushCache="true"  statementType="PREPARED"  
				keyProperty=""  keyColumn=""  timeout="20">
		</insert>

		<update  id="updateAuthor"  parameterType="domain.blog.Author"  flushCache="true" statementType="PREPARED"
				timeout="20">
		</update>

		<delete id="deleteAuthor"  parameterType="domain.blog.Author"  flushCache="true"  statementType="PREPARED"
		  		timeout="20">
		 </delete>

		<!-- 
		
		id : 구문을 찾기 위해 사용될 수 있는 네임스페이스내 유일한 구분자
		
		parameterType : 구문에 전달될 파라미터의 패키지 경로를 포함한 전체 클래스명이나 별칭
		
		flushCache : 이 값을 true 로 셋팅하면 구문이 호출될때마다 캐시가 지원질것이다(flush). 디폴트는 false 이다.
		
		timeout : 예외가 던져지기 전에 데이터베이스의 요청 결과를 기다리는 최대시간을 설정한다. 디폴트는 셋팅하지 않는 것이고 드라이버에 따라 다소 지원되지 않을 수 있다.
		
		statementType : STATEMENT, PREPARED 또는 CALLABLE중 하나를 선택할 수 있다. 마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다. 디폴트는 PREPARED 이다.
		
		useGeneratedKeys : (입력(insert, update)에만 적용) 데이터베이스에서 내부적으로 생성한 키 (예를들어 MySQL또는 SQL Server와 같은 RDBMS의 자동 증가 필드)를 받는 JDBC getGeneratedKeys메소드를 사용하도록 설정하다. 디폴트는 false 이다.
		
		keyProperty : (입력(insert, update)에만 적용) getGeneratedKeys 메소드나 insert 구문의 selectKey 하위 엘리먼트에 의해 리턴된 키를 셋팅할 프로퍼티를 지정. 디폴트는 셋팅하지 않는 것이다. 여러개의 칼럼을 사용한다면 프로퍼티명에 콤마를 구분자로 나열할수 있다.
		
		keyColumn : (입력(insert, update)에만 적용) 생성키를 가진 테이블의 칼럼명을 셋팅. 키 칼럼이 테이블이 첫번째 칼럼이 아닌 데이터베이스(PostgreSQL 처럼)에서만 필요하다. 여러개의 칼럼을 사용한다면 프로퍼티명에 콤마를 구분자로 나열할수 있다.
		
		databaseId : 설정된 databaseIdProvider가 있는 경우 마이바티스는 databaseId 속성이 없는 모든 구문을 로드하거나 일치하는 databaseId와 함께 로드될 것이다. 같은 구문에서 databaseId가 있거나 없는 경우 모두 있다면 뒤에 나온 것이 무시된다.

		 -->




















	</mapper>
